// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  password  String
  avatar    String   @default("https://i.ibb.co/P50Hk9p/avatar.png")
  phone     String   @unique
  role      Role     @default(USER)
  Order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  barber Barber?
  client CLient?

  @@map("users")
}

model CLient {
  id           String     @id @default(uuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id])
  complain     Complain[]
  referralCode String?
  points       Int        @default(0)
}

model Barber {
  id       String  @id @default(uuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
  rate     Int     @default(0)
  order    Order[]
  branchId String
  branch   Branch  @relation(fields: [branchId], references: [id])
}

model Complain {
  id        String   @id @default(uuid())
  client    CLient   @relation(fields: [clientId], references: [id])
  clientId  String
  complain  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  BARBER
  CASHIER
  ADMIN
  USER
}

model Branch {
  id        String   @id @default(uuid())
  name      String
  location  String
  phone     String
  branchImg String
  rate      Int      @default(0)
  Order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  barber    Barber[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  services  Service[]
  available Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id         String   @id @default(uuid())
  name       String
  price      Int
  serviceImg String?
  duration   Int
  points     Int
  gainPoints Int
  categoryId String
  available  Boolean  @default(true)
  order      Order[]  @relation("OrderToServices")
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id         String   @id @default(uuid())
  name       String
  productImg String
  available  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Slot {
  id    String   @id @default(uuid())
  start Int
  end   Int
  slot  String[]
}

model PromoCode {
  id        String    @id @default(uuid())
  code      String
  discount  Int
  type      PromoType
  expiredAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  order     Order[]
}

enum PromoType {
  PERCENTAGE
  AMOUNT
}

model Order {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  barberId    String
  Barber      Barber        @relation(fields: [barberId], references: [id])
  date        DateTime
  slot        String
  branchId    String
  branch      Branch        @relation(fields: [branchId], references: [id])
  note        String?
  points      Int           @default(0)
  promoCode   PromoCode?    @relation(fields: [promoCodeId], references: [id])
  promoCodeId String?
  status      OrderStatus   @default(PENDING)
  booking     BookingStatus @default(UPCOMING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  service     Service[]     @relation("OrderToServices")

  subTotal Int @ignore
  total    Int @ignore
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  PAID
  CANCELLED
}

enum BookingStatus {
  UPCOMING
  PAST
  CANCELLED
}
