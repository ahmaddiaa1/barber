generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid()) @map("id")
  firstName     String
  lastName      String
  avatar        String         @default("https://i.ibb.co/P50Hk9p/avatar.png")
  phone         String         @unique
  password      String
  fcmToken      String?
  createdAt     DateTime       @default(now()) @map("createdAt")
  updatedAt     DateTime       @updatedAt @map("updatedAt")
  role          Role           @default(USER) @map("role")
  admin         Admin?
  barber        Barber?
  cashier       Cashier?
  client        Client?
  BarberOrders  Order[]        @relation("BarberOrders")
  CashierOrders Order[]        @relation("CashierOrders")
  UserOrders    Order[]        @relation("UserOrders")
  notification  notification[] @relation("notifications")

  @@index([phone])
  @@index([role])
  @@map("users")
}

model Client {
  id             String           @id @default(uuid())
  referralCode   String?          @unique
  points         Int              @default(0)
  user           User             @relation(fields: [id], references: [id])
  complain       Complain[]
  ClientPackages ClientPackages[]

  @@index([referralCode])
}

model Cashier {
  id       String @id
  branchId String
  branch   Branch @relation(fields: [branchId], references: [id])
  user     User   @relation(fields: [id], references: [id])
}

model Barber {
  id       String @id
  branchId String
  rate     Int    @default(0)
  branch   Branch @relation(fields: [branchId], references: [id])
  user     User   @relation(fields: [id], references: [id])
}

model Admin {
  id   String @id
  user User   @relation(fields: [id], references: [id])
}

model Settings {
  id               String @id @default(uuid())
  PointsPercentage Int    @default(10)
}

model Static {
  id        String      @id @default(uuid())
  about     about?
  questions questions[]
}

model about {
  id       String @id
  content  String
  location String
  time     String
  Static   Static @relation(fields: [id], references: [id])

  @@map("about")
}

model questions {
  id       String  @id
  question String
  answer   String
  Static   Static? @relation(fields: [id], references: [id])

  @@map("questions")
}

model Token {
  id        String   @id @default(uuid())
  token     String   @unique
  expiredAt DateTime
}

model Complain {
  id        String   @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [userId], references: [id])
}

model Branch {
  id    String @id @default(uuid())
  phone String @unique

  location    String
  branchImg   String
  rate        Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  barber      Barber[]
  Cashier     Cashier[]
  Order       Order[]
  Translation Translation[] @relation("branch")
}

model Translation {
  id       String    @id
  name     String
  language Language
  branch   Branch?   @relation("branch", fields: [id], references: [id], map: "Translation_branch_key")
  category Category? @relation("category", fields: [id], references: [id], map: "Translation_category_key")
  service  Service?  @relation("service", fields: [id], references: [id], map: "Translation_service_key")
  offers   Offers?   @relation("offers", fields: [id], references: [id], map: "Translation_offers_key")

  @@index([name])
}

model TranslationDes {
  id             String          @id
  name           String
  description    String
  language       Language
  clientPackages ClientPackages? @relation("clientPackages", fields: [id], references: [id], map: "Translation_clientPackages_key")
  notification   notification?   @relation("notifications", fields: [notificationId], references: [id], map: "Translation_notification_key")
  notificationId String?

  @@index([name])
}

enum Language {
  EN
  AR
}

model Category {
  id          String        @id @default(uuid())
  name        String
  available   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  services    Service[]
  Translation Translation[] @relation("category")
}

model Service {
  id               String             @id @default(uuid())
  name             String
  price            Int
  serviceImg       String?
  duration         Int
  categoryId       String
  available        Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  offersId         String?
  PackagesServices PackagesServices[]
  category         Category           @relation(fields: [categoryId], references: [id])
  order            Order[]            @relation("OrderToServices")
  packagesIds      Packages[]         @relation("PackagesToServices")
  Translation      Translation[]      @relation("service")
}

model Product {
  id         String   @id @default(uuid())
  name       String
  productImg String
  price      Int
  available  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Slot {
  id    String   @id @default(uuid())
  start Int
  end   Int
  slot  String[]
}

model PromoCode {
  id        String    @id @default(uuid())
  code      String
  discount  Int
  active    Boolean   @default(true)
  expiredAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      PromoType
}

model Order {
  id          String        @id @default(uuid())
  branchId    String
  promoCode   String?
  date        DateTime
  slot        String
  note        String?
  booking     BookingStatus @default(UPCOMING)
  status      OrderStatus   @default(PENDING)
  points      Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  subTotal    Int
  total       Int
  userId      String
  barberId    String
  cashierId   String?
  barber      User          @relation("BarberOrders", fields: [barberId], references: [id])
  branch      Branch        @relation(fields: [branchId], references: [id])
  Cashier     User?         @relation("CashierOrders", fields: [cashierId], references: [id])
  discount    Int           @default(0)
  client      User          @relation("UserOrders", fields: [userId], references: [id])
  service     Service[]     @relation("OrderToServices")
  usedPackage String[]
}

model Offers {
  id          String        @id @default(uuid()) @map("id")
  price       Int
  image       String?
  offerType   OfferType
  expiresAt   DateTime
  createdAt   DateTime      @default(now()) @map("createdAt")
  updatedAt   DateTime      @updatedAt @map("updatedAt")
  packages    Packages?
  points      Points?
  Translation Translation[] @relation("offers")
}

enum OfferType {
  POINTS
  PACKAGES
}

model Packages {
  id        String         @id
  count     Int            @default(1)
  type      PackagesStatus @default(SINGLE)
  expiresAt DateTime
  offers    Offers         @relation(fields: [id], references: [id])
  services  Service[]      @relation("PackagesToServices")
}

model Points {
  id     String @id
  points Int
  Offers Offers @relation(fields: [id], references: [id])
}

model PackagesServices {
  id               String         @id @default(uuid()) @map("id")
  serviceId        String
  isActive         Boolean        @default(true)
  usedAt           DateTime?
  createdAt        DateTime       @default(now()) @map("createdAt")
  service          Service        @relation(fields: [serviceId], references: [id])
  remainingCount   Int?
  ClientPackagesId String
  ClientPackages   ClientPackages @relation(fields: [ClientPackagesId], references: [id])
}

model ClientPackages {
  id             String             @id @default(uuid()) @map("id")
  description    String?
  image          String?
  packageId      String
  packageService PackagesServices[]
  type           PackagesStatus
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now()) @map("createdAt")
  updatedAt      DateTime           @updatedAt @map("updatedAt")
  clientId       String
  client         Client             @relation(fields: [clientId], references: [id])
  Translation    TranslationDes[]   @relation("clientPackages")
}

model notification {
  id          String           @id @default(uuid())
  content     String
  image       String?
  user        User[]           @relation("notifications")
  createdAt   DateTime         @default(now()) @map("createdAt")
  translation TranslationDes[] @relation("notifications")
}

enum PackagesStatus {
  MULTIPLE
  SINGLE
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  CANCELLED
  COMPLETED
  PAID
}

enum BookingStatus {
  UPCOMING
  PAST
  CANCELLED
}

enum PromoType {
  PERCENTAGE
  AMOUNT
}

enum Role {
  BARBER
  CASHIER
  ADMIN
  USER
}
