// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String     @id @default(uuid())
  firstName   String
  lastName    String
  password    String
  avatar      String     @default("https://i.ibb.co/P50Hk9p/avatar.png")
  phone       String     @unique
  complain    Complain[]
  referalCode String?
  points      Int        @default(0)
  rate        Int        @default(0)
  role        Role       @default(USER)
  branchId    String?
  branch      Branch?    @relation(fields: [branchId], references: [id])
  Order       Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Complain {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  complain  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  BARBER
  CASHIER
  ADMIN
  USER
}

model Branch {
  id        String   @id @default(uuid())
  name      String
  location  String
  phone     String
  branchImg String
  rate      Int      @default(0)
  barber    User[]
  Order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String
  services  Service[]
  available Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id         String   @id @default(uuid())
  name       String
  price      Int
  serviceImg String?
  duration   Int
  categoryId String
  orderId    String?
  available  Boolean  @default(true)
  order      Order?   @relation(fields: [orderId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id         String   @id @default(uuid())
  name       String
  productImg String
  available  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Slot {
  id    String   @id @default(uuid())
  start DateTime
  end   DateTime
  slot  String[]
}

model Order {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  date      DateTime
  slot      String
  Services  Service[]
  branchId  String
  branch    Branch        @relation(fields: [branchId], references: [id])
  note      String?
  duration  Int
  points    Int           @default(0)
  promoCode String?
  discount  Int           @default(0)
  subTotal  Int
  total     Int
  status    OrderStatus   @default(PENDING)
  booking   BookingStatus @default(UPCOMING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  PAID
  CANCELLED
}

enum BookingStatus {
  UPCOMING
  PAST
  CANCELLED
}
