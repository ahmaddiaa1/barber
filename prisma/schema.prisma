generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(uuid()) @map("id")
  firstName     String
  lastName      String
  avatar        String   @default("https://i.ibb.co/P50Hk9p/avatar.png")
  phone         String   @unique
  password      String
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  role          Role     @default(USER) @map("role")
  admin         Admin?
  barber        Barber?
  cashier       Cashier?
  client        Client?
  BarberOrders  Order[]  @relation("BarberOrders")
  CashierOrders Order[]  @relation("CashierOrders")
  UserOrders    Order[]  @relation("UserOrders")

  @@index([phone])
  @@index([role])
  @@map("users")
}

model Client {
  id             String           @id @default(uuid())
  referralCode   String?          @unique
  points         Int              @default(0)
  user           User             @relation(fields: [id], references: [id])
  complain       Complain[]
  Offers         Offers[]         @relation("ClientOffers")
  ClientPackages ClientPackages[]

  @@index([referralCode])
}

model Cashier {
  id       String @id
  branchId String
  branch   Branch @relation(fields: [branchId], references: [id])
  user     User   @relation(fields: [id], references: [id])
}

model Barber {
  id       String @id
  branchId String
  rate     Int    @default(0)
  branch   Branch @relation(fields: [branchId], references: [id])
  user     User   @relation(fields: [id], references: [id])
}

model Admin {
  id   String @id
  user User   @relation(fields: [id], references: [id])
}

model Settings {
  id               String @id @default(uuid())
  PointsPercentage Int    @default(10)
}

model About {
  id       String @id @default(uuid())
  message  String
  location String
  time     String
}

model Token {
  id        String   @id @default(uuid())
  token     String   @unique
  expiredAt DateTime
}

model Complain {
  id        String   @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [userId], references: [id])
}

model Branch {
  id        String    @id @default(uuid())
  name      String
  location  String
  phone     String
  branchImg String
  rate      Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  barber    Barber[]
  Cashier   Cashier[]
  Order     Order[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  available Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model Service {
  id               String             @id @default(uuid())
  name             String
  price            Int
  serviceImg       String?
  duration         Int
  categoryId       String
  available        Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  offersId         String?
  PackagesServices PackagesServices[]
  category         Category           @relation(fields: [categoryId], references: [id])
  offers           Offers?            @relation(fields: [offersId], references: [id])
  order            Order[]            @relation("OrderToServices")
  Packages         Packages?          @relation(fields: [packagesId], references: [id])
  packagesId       String?
}

model Product {
  id         String   @id @default(uuid())
  name       String
  productImg String
  available  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Slot {
  id    String   @id @default(uuid())
  start Int
  end   Int
  slot  String[]
}

model PromoCode {
  id        String    @id @default(uuid())
  code      String
  discount  Int
  active    Boolean   @default(true)
  expiredAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      PromoType
  order     Order[]
}

model Order {
  id             String             @id @default(uuid())
  branchId       String
  promoCode      String?
  date           DateTime
  slot           String
  note           String?
  booking        BookingStatus      @default(UPCOMING)
  status         OrderStatus        @default(PENDING)
  points         Int                @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  subTotal       Int
  total          Int
  userId         String
  barberId       String
  cashierId      String?
  barber         User               @relation("BarberOrders", fields: [barberId], references: [id])
  branch         Branch             @relation(fields: [branchId], references: [id])
  Cashier        User?              @relation("CashierOrders", fields: [cashierId], references: [id])
  Code           PromoCode?         @relation(fields: [promoCode], references: [id])
  client         User               @relation("UserOrders", fields: [userId], references: [id])
  service        Service[]          @relation("OrderToServices")
  packageService PackagesServices[]
}

model Points {
  id        String   @id @default(uuid()) @map("id")
  title     String
  points    Int
  price     Int
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model Packages {
  id          String    @id @default(uuid()) @map("id")
  description String?
  title       String
  image       String?
  price       Int
  expiresAt   DateTime
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")
  services    Service[]
}

model PackagesServices {
  id               String         @id @default(uuid()) @map("id")
  serviceId        String
  isActive         Boolean        @default(true)
  usedAt           DateTime?
  createdAt        DateTime       @default(now()) @map("createdAt")
  service          Service        @relation(fields: [serviceId], references: [id])
  Order            Order?         @relation(fields: [orderId], references: [id])
  count            Int?
  orderId          String?
  ClientPackagesId String
  ClientPackages   ClientPackages @relation(fields: [ClientPackagesId], references: [id])
}

model ClientPackages {
  id             String             @id @default(uuid()) @map("id")
  packageService PackagesServices[]
  type           PackagesStatus
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now()) @map("createdAt")
  updatedAt      DateTime           @updatedAt @map("updatedAt")
  clientId       String
  client         Client             @relation(fields: [clientId], references: [id])
}

model Offers {
  id          String    @id @default(uuid()) @map("id")
  title       String
  description String?
  image       String?
  price       Int
  pointsId    String?
  expiresAt   DateTime
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")
  services    Service[]
  clients     Client[]  @relation("ClientOffers")
}

enum PackagesStatus {
  MULTIPLE
  SINGLE
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  CANCELLED
  COMPLETED
  PAID
}

enum BookingStatus {
  UPCOMING
  PAST
  CANCELLED
}

enum PromoType {
  PERCENTAGE
  AMOUNT
}

enum Role {
  BARBER
  CASHIER
  ADMIN
  USER
}
